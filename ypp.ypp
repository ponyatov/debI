%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }

%token <o> SYM STR NUM				/* scalar: symbol 'string' number */
%token <o> L R LQ RQ LB RB			/* bracket: () [] {} */
%token <o> EQ AT COLON TILD TICK	/* operator: = @ : ~ ` */
%token <o> ADD SUB MUL DIV POW		/* operator: + - * / ^ */
%type <o> ex scalar list lambda

%left EQ
%left ADD SUB
%left MUL DIV
%left POW
%left AT
%left TILD
%%
REPL	: | REPL ex			{ W($2->eval()); W("\n"); } ;
scalar	: SYM | STR ;
ex		: scalar
		| L ex R			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| LB lambda RB		{ $$=$2; }
		| TILD ex			{ $$=$1; $$->push($2); }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex COLON ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex SUB ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex MUL ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex POW ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	: 					{ $$=new List(); }
		| list ex			{ $$=$1; $$->push($2); }
;
lambda	: 					{ $$=new Lambda(); }
		| lambda TICK SYM	{ $$=$1; $$->parval($3); }
		| lambda ex			{ $$=$1; $$->push($2); }
;
%%	 
