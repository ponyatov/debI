%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM STR
%token <o> L R LQ RQ
%token <o> EQ AT COLON TILD
%token <o> ADD SUB MUL DIV POW
%type <o> ex scalar list

%left EQ
%left ADD SUB
%left MUL DIV
%left POW
%left AT
%left TILD
%%
REPL	: | REPL ex		{ W($2->eval()); W("\n"); } ;
scalar	: SYM | STR ;
ex		: scalar
		| L ex R		{ $$=$2; }
		| LQ list RQ	{ $$=$2; }
		| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex COLON ex	{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
		| TILD ex		{ $$=$1; $$->push($2); }
;
list	: 				{ $$=new List(); }
		| list ex		{ $$=$1; $$->push($2); }
;
%%	 
